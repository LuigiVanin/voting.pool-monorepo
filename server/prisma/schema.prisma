// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  email        String         @unique
  imageUrl     String?
  password     String?
  isInvited    Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  Pool         Pool[]
  Participants Participants[]

  @@map("users")
}

model Pool {
  id           Int            @id @default(autoincrement())
  name         String
  desc         String?
  closed       Boolean        @default(false)
  ownerId      Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  Owner        User           @relation(fields: [ownerId], references: [id])
  Participants Participants[]

  @@unique([ownerId, name])
  @@map("pools")
}

model Participants {
  id           Int     @id @default(autoincrement())
  alreadyVoted Boolean @default(false)
  poolId       Int
  pool         Pool    @relation(fields: [poolId], references: [id])
  userId       Int
  user         User    @relation(fields: [userId], references: [id])
  vote         Votes?  @relation("owner")
  voted        Votes[] @relation("voted")

  @@unique([poolId, userId])
  @@map("participants")
}

model Votes {
  id      Int           @id @default(autoincrement())
  poolId  Int
  ownerId Int           @unique()
  votedId Int
  owner   Participants  @relation("owner", fields: [ownerId], references: [id])
  voted   Participants? @relation("voted", fields: [votedId], references: [id])

  @@unique([ownerId, poolId])
  @@map("votes")
}
